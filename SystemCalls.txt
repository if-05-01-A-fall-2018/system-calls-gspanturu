-fork: creates a new process by duplicating the calling process.
	The calling process is the parent process, the new process is the child process.
	Arguments: void


-stat: displays file or file system status.
      returns a struct with information about a filepath given.
  Arguments: const char* pathname, struct stat *buf


-kill:	is used to send a signal to a running process and terminate it.
	Each signal has a numeric value and an action associated to it(e.g. -9 ->SIGKILL: can't be ignored by a process
  Arguments: pid_t pid, int sig


-mmap:	creates a new mapping in the virtual address space of the calling process. 
  Arguments: void *addr, size_t length, int prot, int flags, int fd, off_t offset


-chmod: used to change file mode bits.
  Arguments: const char *path, mode_t mode


-waitpid: wait for process to change state
  Arguments: pid_t pid, int *status, int options


SYSTEM CALL FAILS:

- fork: will fail to allocate the kernel structures if there's not enough memory
- exec:  all of the functions associated with exec may fail and set errno  (error number)
- unlink: The file pathname can't be unlinked because it is being used by the system or another process or can't unlink if the pathname refers to a directory
- read: will fail if fd(file descriptor) is not valid or if buf (buffer) is outside the accessible address space
- mount: will fail if the source is already  mounted or can't be mounted because the target is still busy (e.g. has open files)
- chmod: will fail if the file doesn't exist, the fd (file descriptor) is not valid or if there isn't enough kernel memory
- kill: will fail if the pID doesn't exist or if there was an invalid signal

TRAPS:

A trap is used to enter kernel mode. The system ( kernel ) instruction is loaded and the trap is called and those loaded instructions will be done, e.g. going to a pharmacy, ring at the door and give your recipe.
